<pre class='metadata'>
Title: CSS Shared Element Transitions Module Level 1
Shortname: css-shared-element-transitions
Level: 1
Status: ED
Group: csswg
TR: https://www.w3.org/TR/css-shared-element-transitions/
ED: https://drafts.csswg.org/css-shared-element-transitions/
Work Status: exploring
Editor: Tab Atkins-Bittner, Google, http://xanthir.com/contact/, w3cid 42199
Abstract: This module defines the Single-Page Document-Transition API, along with associated properties and pseudo-elements.
</pre>

<pre class=link-defaults>
spec:webidl; type:dfn; text:resolve
spec:css-position-3; type:property
    text: inset-block-start
    text: inset-inline-start
spec:css-shapes-3; type:function; text:rect()
</pre>

<style>
/* Put nice boxes around each algorithm. */
[data-algorithm]:not(.heading) {
    padding: .5em;
    border: thin solid #ddd; border-radius: .5em;
    margin: .5em calc(-0.5em - 1px);
}
[data-algorithm]:not(.heading) > :first-child {
    margin-top: 0;
}
[data-algorithm]:not(.heading) > :last-child {
    margin-bottom: 0;
}
[data-algorithm] [data-algorithm] {
      margin: 1em 0;
}
</style>

Introduction {#intro}
=====================

    This spec describes the CSS and JS mechanics
    of the single-page Page Transition API.


Page Transitions {#page-transitions}
================

Tagging Elements For Transition: the 'page-transition-tag' property {#page-transition-tag-prop}
-------------------------------------------------------------------

<pre class=propdef>
Name: page-transition-tag
Value: none | <<custom-ident>>
Initial: none
Inherited: no
Percentages: n/a
Computed Value: as specified
Animation type: discrete
</pre>

The 'page-transition-tag' property "tags" an element
as participating in a page transition.

<dl dfn-type=value dfn-for=page-transition-tag>
    : <dfn>none</dfn>
    :: The element will not participate in a page transition.

    : <dfn><<custom-ident>></dfn>
    :: The element can participate in a page transition,
        as either an outgoing or incoming element,
        with a <dfn dfn for>page transition tag</dfn>
        equal to the <<custom-ident>>'s value.

        The value <css>none</css>
        is invalid as a <<custom-ident>>.
</dl>

The root element participates in a page transition by default using
the following style in the [=user-agent origin=].

<pre><code highlight=css>
	html {
	  page-transition-tag: root;
	}
 </code></pre>

Pseudo-Elements {#pseudo}
===============

While the UA is [=animating a page transition=],
it creates the following <dfn export>page-transition pseudo-elements</dfn>,
to represent the various items being animated.

The ''::page-transition'' pseudo-element acts as a grouping element for other
[=page-transition pseudo-elements=] and has the document's root element as its
[=originating element=].

<p class="note">For example, '':root::page-transition'' selector matches this
pseudo-element, but ''div::page-transition'' does not.
</p>

Other [=page-transition pseudo-elements=] take a <<pt-tag-selector>> argument
to specify which elements tagged with ''page-transition-tag'' are affected.

There can be multiple pseudo-elements of the same type,
one for each ''page-transition-tag'' participating in a transition.

The <<pt-tag-selector>> is defined as follows:

<pre class=prod>
    <dfn>&lt;pt-tag-selector></dfn> = '*' | <<custom-ident>>
</pre>

A value of ''*'' makes the corresponding selector apply to all pseudo elements
of the specified type. The specificity of a page-transition selector with a
''*'' argument is zero.

The <<custom-ident>> value makes the corresponding selector apply to exactly
one pseudo element of the specified type, namely the pseudo-element that is
created as a result of the ''page-transition-tag'' property on an element with
the same <<custom-ident>> value. The specificity of a page-transition selector
with a <<custom-ident>> argument is the same as for other pseudo-elements, and
is equivalent to a [=type selector=].

The following describes all of the [=page-transition pseudo-elements=] and their function:

: <dfn>::page-transition</dfn>
:: This pseudo-element is the grouping container of all the other
    [=page-transition pseudo-elements=].  Its [=originating element=] is the
    document's root element.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition {
      position: fixed;
      inset: 0;
    }
    </code></pre>
    
    Note: The aim of the style is to size the pseudo-element to cover the
    complete viewport.

    Issue: Is this needed? For multiple independent transitions this could be
    useful to separate which transition is represented in the particular
    :page-transition subtree.

: <dfn>::page-transition-container( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each ''page-transition-tag'' in a page transition,
    and holds the rest of the pseudo-elements corresponding
    to this ''page-transition-tag''.

    Its [=originating element=] is the ''::page-transition''
    pseudo-element.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-container(*) {
      position: absolute;
      top: 0;
      left: 0;
    }
    </code></pre>

    Note: The aim of the style is to position the element relative to its
    ::page-transition parent.

    In addition to above, styles in the [=user-agent origin=] animate this
    pseudo-element's 'width' and 'height' from the size of the outgoing element's
    [=border box=] to that of the incoming element's [=border box=]. Also the
    element's 'transform' is animated from the outgoing element's screen space
    transform to the incoming element's screen space transform. This style is
    generated dynamically since the values of animated properties are determined
    at the time that the transition begins.

    Issue: The selector for this and subsequently defined pseudo-elements is
    likely to change to indicate position in the pseudo-tree hierarchy.

: <dfn>::page-transition-image-wrapper( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each page-transition-tag being in a page transition,
    and holds the images of the outgoing and incoming elements.

    Its [=originating element=] is the ''::page-transition-container()''
    pseudo-element with the same tag.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-image-wrapper(*) {
      position: absolute;
      inset: 0;
    }
    </code></pre>

    In addition to above, styles in the [=user-agent origin=] add ''isolation:
    isolate'' to this pseudo-element if it has both
    [=page-transition-incoming-image=] and [=page-transition-outgoing-image=] as
    descendants.

    Note: The aim of the style is to position the element to occupy the same space
    as its ::page-transition-container element and provide isolation for
    blending.

    Issue: Isolation is only necessary to get the right cross-fade between
    incoming and outgoing image pixels. Would it be simpler to always add it
    and try to optimize in the implementation?

: <dfn>::page-transition-outgoing-image( <<pt-tag-selector>> )</dfn>
::  One of these pseudo-elements exists
    for each element in the outgoing DOM being animated by the page transition,
    and is a [=replaced element=] displaying the outgoing element's snapshot image.
    It has [=natural dimensions=] equal to the snapshot's size.

    Its [=originating element=] is the ''::page-transition-image-wrapper()''
    pseudo-element with the same tag.

    The following [=user-agent origin=] styles apply to this element:

    <pre><code highlight=css>
    html::page-transition-outgoing-image(*) {
      position: absolute;
      inset-block-start: 0;
      inline-size: 100%;
      block-size: auto;
    }
    </code></pre>

    Note: The aim of the style is to match the element's inline size while
    retaining the aspect ratio. It is also placed at the block start.

    In addition to above, styles in the [=user-agent origin=] add
    ''mix-blend-mode:plus-lighter'' to this pseudo element if the ancestor
    [=::page-transition-image-wrapper=] has both
    [=page-transition-incoming-image=] and [=page-transition-outgoing-image=] as
    descendants.

    Note: mix-blend-mode value of plus-lighter ensures that the blending of identical
    pixels from the outgoing and incoming images results in the same color value
    as those pixels.

    Additional [=user-agent origin=] styles added to animate these pseudo-elements
    are detailed in [=Animate a page transition=].

: <dfn>::page-transition-incoming-image( <<pt-tag-selector>> )</dfn>
::  Identical to ''::page-transition-outgoing-image()'',
    except it deals with the incoming element instead.

The precise tree structure, and in particular the order of sibling
pseudo-elements, is defined in the [=Create transition pseudo-elements=]
algorithm.

Styles applied to these pseudo-elements are limited to styles in the
[=user-agent origin=] unless the {{[[Phase]]}} associated with them is
set to "running".

New Stacking Layer {#new-stacking-layer}
===============

This specification introduces a new stacking layer to the
<a href="https://www.w3.org/TR/CSS2/zindex.html">Elaborate description of Stacking Contexts</a>.

The ''::page-transition'' pseudo-element generates a new stacking context
called <dfn>page-transition layer</dfn> with the following characteristics:

1. Its parent stacking context is the root stacking context.

1. If the ''page-transition'' pseudo-element exists, a new stacking
    context is created for the
    <a href="https://dom.spec.whatwg.org/#concept-tree-root">root</a>
    and <a href="https://fullscreen.spec.whatwg.org/#top-layer">top layer</a>
    elements.
    The ''page-transition layer'' is a sibling of this stacking context.

1. The ''page-transition layer'' paints after the stacking context for the
     <a href="https://dom.spec.whatwg.org/#concept-tree-root">root</a>
    and <a href="https://fullscreen.spec.whatwg.org/#top-layer">top layer</a>
    elements.

Note: The intent of the feature is to be able to capture the contents of the
page, which includes the top layer elements. In order to accomplish that, the
''page-transition layer'' cannot be a part of the captured top layer context,
since that results in a circular dependecy. Instead, this stacking context is a
sibling of other page contents.

Issue: Do we need to clarify that the stacking context for the root and top
layer elements has filters and effects coming from the root element's style?

API {#api}
====

Single-page API:

<xmp class=idl>
interface SameDocumentTransition {
    constructor();
    Promise<undefined> prepare(AsyncFunction cb);
    undefined abandon();
    readonly attribute Promise<any> finished;
};

callback AsyncFunction = Promise<any> ();
</xmp>

The {{SameDocumentTransition}} represents and controls
a single same-document transition. That is, it controls a transition where the
starting and ending document are the same, possibly with changes to the
document's DOM structure.

{{SameDocumentTransition}} objects have a <dfn attribute for=SameDocumentTransition>\[[TaggedElements]]</dfn>
private slot, which is a [=/map=], whose keys are [=page
transition tags=] and whose values are <dfn>CapturedElement</dfn>s, a
[=/struct=] with items named <dfn>outgoing image</dfn> (an image),
<dfn>outgoing styles</dfn> (a set of styles), and
<dfn>incoming element</dfn> (an element).
All of the slots are initially empty.

Additionally the following structures exist:

* A <dfn attribute for=SameDocumentTransition>\[[Phase]]</dfn> internal slot,
    which is a [=/string=] chosen from "idle", "outgoing-capture",
    "incoming-prep", and "running". The initial value is "idle".

* A <dfn attribute for=SameDocumentTransition>\[[ReadyPromise]]</dfn>
    internal slot, which is a {{Promise}} created when a page transition is
    started, and resolved when the phase is updated from "incoming-prep" to
    "running".

* A <dfn attribute for=SameDocumentTransition>\[[finished]]</dfn> attribute,
    which is a {{Promise}} created when a page transition is started, and
    resolved when it’s ended (successfully or unsuccessfully).

<div algorithm="SameDocumentTransition.prepare()">
    The [=method steps=] for
    <dfn method for=SameDocumentTransition>prepare(|cb|)</dfn>
    are as follows:
    
    1. If any {{SameDocumentTransition}} object in the Document
        ([=this=] or any other)
        has a {{[[Phase]]}} internal slot set to a non-"idle" value,
        [=throw=] an {{InvalidStateException}}.

    1. If multiple elements or pseudo-elements on the Document have the same
	     [=page transition tag=], [=throw=] an {{InvalidStateException}}.
	
	  1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' [=page transition tag=],
		   [=throw=] an {{InvalidStateException}} if any of the following conditions is true:
	
        1. |el| does not have <a href="https://drafts.csswg.org/css-contain/#containment-layout">layout containment</a> applied.
	
        1. |el| does not forbid <a href="https://drafts.csswg.org/css-break/#valdef-break-inside-avoid">fragmentation</a>.
	
        1. |el| is <a href="https://drafts.csswg.org/css-images-4/#element-not-rendered">not rendered</a>.
      
    1. Set [=this's=] {{[[Phase]]}} internal slot to "outgoing-capture".

    1. Let |realm| be [=this's=] [=relevant Realm=].

    1. Let |readyP| be [=a new promise=] in |realm|.
        Set [=this's=] {{[[ReadyPromise]]}} internal slot to |readyP|.
    
    1. Let |finishedP| be [=a new promise=] in |realm|.
        Set [=this's=] {{[[finished]]}} attribute to |finishedP|.

    1. Let |taggedElements| be [=this's=] {{[[TaggedElements]]}} internal slot.
    
    1. Schedule a <a href="https://html.spec.whatwg.org/multipage/webappapis.html#rendering-opportunity">rendering opportunity</a>.

        Note: Defering the subsequent step to the next rendering opportunity allows DOM mutations made by the author when
        triggering the transition to be presented to the user and captured in the snapshots.
    
    1. Execute the following steps after step 14 of
        <a href=https://html.spec.whatwg.org/multipage/webappapis.html#update-the-rendering>Update the rendering</a>
        at the next <a href="https://html.spec.whatwg.org/multipage/webappapis.html#rendering-opportunity">rendering opportunity</a>:
    
        1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' 'page-transition-tag' value, in <a href="https://www.w3.org/TR/CSS21/zindex.html">paint order</a>:

            1. Let |tag| be |el|&apos;s computed 'page-transition-tag' value.
            1. Let |capture| be a new [=CapturedElement=] struct.
            1. Set |capture|&apos;s [=outgoing image=]
                to the result of [=capturing the image=] of |el|.
            1. Set |capture|&apos;s [=outgoing styles=] to the following:

                : 'transform'
                :: A CSS transform that would place |el|
                    from the document origin to its current quad.
                :: This value is identity for the root element.

                : 'width'
                : 'height'
                :: The width and height of |el|'s border box.
                :: This value is the bounds of the initial containing block for the root element.

                : 'object-view-box'
                :: An 'object-view-box' value that,
                    when applied to the outgoing image,
                    will cause the view box to coincide with |el|'s [=border box=]
                    in the image.

                : 'writing-mode'
                :: The 'writing-mode' of |el|.

                : 'direction'
                :: The 'direction' of |el|.

            1. Set |taggedElements|[|tag|] to |capture|.
          
        1. [=Create transition pseudo-elements=] managed by [=this=].
        
        1. Suppress rendering opportunities for [=this's=] Document.
	
            Note: The aim is to prevent unintended DOM updates from being presented to the
			      user after a cached snapshot for the elements has been captured. We wait for
			      one rendering opportunity after prepare to present DOM mutations made by the
			      author before prepare to be presented to the user. This is also the content
			      captured in snapshots.
    
            Issue: Further clarify this behaviour. Lifecycle updates can still be trigerred
            via script APIs which query style or layout information but no visual updates
            are presented to the user. Is this the same behaviour as render-blocking?
    
            Issue: How should input be handled when in this state? The last frame presented
            to the user will not reflect the DOM state as it asynchronously switches to
            the new version.

        1. [=Queue a global task=] on the [=DOM manipulation task source=],
            given |realm|&apos;s [=Realm/global object=],
            to execute the following steps:

            1. Set [=this's=] {{[[Phase]]}} internal slot to "incoming-prep".
    
            1. [=/Invoke=] |cb|, and let |userP| be the return value.
            
            [=Upon fulfillment=] of |userP|:
	
                1. Stop suppressing rendering opportunities for [=this's=] Document.
	
                    Note: Resuming rendering opportunities is delayed until fulfillment of
                    userP to allow asynchronous loading of the incoming DOM.

                1. If multiple elements or pseudo-elements on the Document have the same
	                  [=page transition tag=], [=abandon the page transition=] managed by
                    [=this=] with an {{InvalidStateException}}.
	
                1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' [=page transition tag=],
				            [=abandon the page transition=] managed by [=this=] with an {{InvalidStateException}}
                    if any of the following conditions is true:

                    1. |el| does not have layout containment applied.

                    1. |el| does not forbid fragmentation.

                    1. |el| is <a href="https://drafts.csswg.org/css-images-4/#element-not-rendered">not rendered</a>.

                1. [=map/For each=] element |el| with a non-''page-transition-tag/none'' 'page-transition-tag' value,
                    in paint order:

                    1. Let |tag| be |el|&apos;s 'page-transition-tag' value.

                    1. If |taggedElements|[|tag|] does not exist,
                        set it to a new [=CapturedElement=] struct.

                    1. Let |capture| be |taggedElements|[|tag|].

                    1. Let |capture|&apos;s [=incoming element=] item be |el|.

                1. Set [=this's=] {{[[Phase]]}} internal slot to "running".

                1. [=Create transition pseudo-elements=] managed by [=this=].

                1. [=Animate a page transition=] managed by [=this=].

                    Note: This will require running document lifecycle phases to compute
                    information calculated during style/layout.

                1. [=Resolve=] {{[[ReadyPromise]]}} with |readyP|.
              
                1. At each next rendering opportunity, run the [=update transition DOM=] steps
                    for [=this=] after step 14 of
                    <a href=https://html.spec.whatwg.org/multipage/webappapis.html#update-the-rendering>Update the rendering</a>.
	
					          Issue: This should likely move to the html spec.

                [=Upon rejection=] of |userP|:

                    1. Let |reason| be the reason |userP| was rejected.

                    1. [=Abandon the page transition=] managed by [=this=]
                        with |reason|.

                        If the time from when |cb| is invoked
                        to when |userP| is fulfilled
                        is longer than an implementation-defined timeout period,
                        [=abandon the page transition=] managed by [=this=]
                        with a {{TimeoutError}}.
    
                        Note: This step needs to happen asynchronously to allow an
                        async implementation of [=capturing the image=] algorithm.
    1. Return |readyP|.
</div>

<div algorithm="SameDocumentTransition.abandon()">
    The [=method steps=] for
    <dfn method for=SameDocumentTransition>abandon()</dfn> are:

    1. If [=this's=] {{[[Phase]]}} internal slot is not "idle",
        [=abandon the page transition=] managed by [=this=]
        with an {{AbortError}}.

    2. Otherwise, do nothing.
</div>

<div class=example>
    If the default animations for the page transition are acceptable,
    then kicking off a transition
    requires nothing more than setting 'page-transition-tag' in the page's CSS,
    and a single line of script to start it:

    <pre highlight=js>
    new SameDocumentTransition()
      .start(()=>coolFramework.changeTheDOMToPageB());
    </pre>

    If more precise management is needed, however,
    transition elements can be managed in script:

    <pre highlight=js>
    async function doTransition() {
      let transition = new SameDocumentTransition();

      // Specify "outgoing" elements. The tag is used to match against
      // "incoming" elements they should transition to, and to refer to
      // the transitioning pseudo-element.
      document.querySelector(".old-message").style.pageTransitionTag = "message";

      // The prepare() call freezes the page's rendering, and triggers
      // an async operation to capture snapshots for the offered elements.
      await transition.prepare(async () => {
        // This callback is invoked by the browser when "outgoing"
        // capture  finishes and the DOM can be switched to the new
        // state. No frames are rendered until this callback returns.

        // Asynchronously load the new page.
        await coolFramework.changeTheDOMToPageB();

        // Tagging elements during the .start() callback marks them as
        // "incoming", to be matched up with the same-tagged "outgoing"
        // elements marked previously and transitioned between.
        document.querySelector(".new-message").style.pageTransitionTag = "message";
      });
      
      // When the promise returned by prepare() resolves, all pseudo-elements
      // for this transition have been generated. They can now be accessed
      // in script to set up custom animations.
      document.documentElement.animate(
        keyframes,
        {...animationOptions,
         pseudoElement: "::page-transition-container(message)",
        }
      );
      
      // When the finished promise resolves, that means the transition is
      // finished (either completed successfully or abandoned).
      await transition.finished;
    }
    </pre>
</div>

<hr>

<div algorithm>
    To <dfn>abandon the page transition</dfn>
    managed by a {{SameDocumentTransition}} |manager|
    with an error |error|:

    1. Stop suppressing rendering opportunities for [=this's=] Document, if
        currently suppressed.

    1. If there is currently a page transition being animated,
        end it.
        Remove all associated [=page-transition pseudo-elements=] from the document.

    1. Set |manager|&apos;s {{[[Phase]]}} internal slot to "idle".

    1. [=Reject=] |manager|&apos;s {{[[ReadyPromise]]}}
        with |error|.
    
    1. [=Reject=] |manager|&apos;s {{[[finished]]}}
        with |error|.
</div>

<div algorithm>
For <dfn>capturing the image</dfn> of an {{Element}} |el|:

	1. Render the referenced element and its descendants,
		at the same size that they would be in the document,
		over an infinite transparent canvas with the following
		characterists:
	
		1. The origin of |el|'s
			<a href="https://drafts.csswg.org/css-overflow/#ink-overflow-rectangle">ink overflow rectangle</a>
			is anchored to canvas origin.
	
		1. If the referenced element has a transform applied to it (or its ancestors),
			the transform is ignored.
	
			Note: This transform is applied to the snapshot using the `transform`
				property of the associated [=page-transition-container=] pseudo-element.
	
		1. For each descendant with a non-''page-transition-tag/none'' [=page-transition-tag=],
			  skip painting this descendant.
	
			Note: This is necessary since the descendant will generate its
				own snapshot which will be displayed and animated independently.

	1. Let |interest rectangle| be the result of [=Compute the interest rectangle=] for |el|.
		The |interest rectangle| is the subset of |el|'s
		<a href="https://drafts.csswg.org/css-overflow/#ink-overflow-rectangle">ink overflow rectangle</a>
		that should be captured.
	
		Note: This is required for cases where an element's ink overflow rectangle needs
			to be clipped because of hardware constraints. For example, if it exceeds
			max texture size.
	
	1. Set the captured image to the contents of the |interest rectangle| in the rendered canvas.
		The natural size of the image is equal to the |interest rectangle| bounds.
</div>
	
<div algorithm>
	To <dfn>update transition DOM</dfn> given a {{SameDocumentTransition}} |manager|:
	
	1. For each [=page-transition pseudo-elements=] associated with |manager|,
		check whether there is an active animation associated with this pseudo-element.
	
		Issue: Define what active animation means here.
	
	1. If no [=page-transition pseudo-elements=] has an active animation:

    1. Set |manager|&apos;s {{[[Phase]]}} internal slot to "idle".

    1. [=Resolve=] |manager|&apos;s{{[[finished]]}} with |finishedP|.

    1. Return.
	
	1. [=map/For each=] |tag| -> |CapturedElement| of |manager|&apos;s {{[[TaggedElements]]}}:

      1. If |CapturedElement| has an [=incoming element=], run [=capture the image=]
        on |CapturedElement|&apos;s [=incoming element=] and update the displayed
        image for ''::page-transition-incoming-image'' with the tag |tag|.

        At the [=user-agent origin=],
        set |incoming|&apos;s 'object-view-box' property
        to a value that when applied to |incoming|,
        will cause the view box to coincide with [=incoming element=]'s [=border box=]
        in the image.

      1. Issue: Also clarify updating the animation based on new bounds/transform to
        get c0 continuity.

</div>

<div algorithm>
	To <dfn>compute the interest rectangle</dfn> of an {{Element}} |el|:
	
	1. If |el| is the document's root element, the |interest rectangle| is
		the intersection of the viewport, including the size of renderered
		scrollbars (if any), with |el|'s ink overflow rectangle.
	
	1. If |el|'s <a href="https://drafts.csswg.org/css-overflow/#ink-overflow-region">ink overflow area</a>
		does not exceed an implementation-defined maximum size, the |interest rectangle|
		is equal to |el|'s ink overflow rectangle.
	
		Issue: Define the algorithm used to clip the snapshot when it exceeds max size.
</div>

<div algorithm>
	To <dfn>animate a page transition</dfn>
	given a {{SameDocumentTransition}} |manager|:
	
	1. Generate a <<keyframe>> named "page-transition-fade-out" in
		[=user-agent origin=] as follows:

		<pre><code highlight=css>
			@keyframes page-transition-fade-out {
  				to { opacity: 0; }
			}
		</code></pre>
	
	1. Generate a <<keyframe>> named "page-transition-fade-in" in
		[=user-agent origin=] as follows:
	
		<pre><code highlight=css>
			@keyframes page-transition-fade-in {
  				from { opacity: 0; }
			}
		</code></pre>
	
	1. Apply the following styles in [=user-agent origin=]:
		
		<pre><code highlight=css>
			html::page-transition-outgoing-image(*) {
				animation: page-transition-fade-out 0.25s both;
			}
			
			html::page-transition-incoming-image(*) {
				animation: page-transition-fade-in 0.25s both;
			}
		</code></pre>

	1. [=map/For each=] |tag| -> |CapturedElement| of |manager|&apos;s {{[[TaggedElements]]}}:
	
		1. If |CapturedElement| has an [=outgoing image=] and [=incoming element=]:
			Let 'transform' be |CapturedElement|&apos;s [=outgoing styles=]'s 'transform' property.
			Let 'width' be |CapturedElement|&apos;s [=outgoing styles=]'s 'width' property.
			Let 'height' be |CapturedElement|&apos;s [=outgoing styles=]'s 'height' property.
	
			Generate a <<keyframe>> named "page-transition-container-anim-|tag|" in
			[=user-agent origin=] as follows:
	
			<pre><code highlight=css>
				@keyframes page-transition-container-anim-|tag| {
					from {
						transform: |transform|;
						width: |width|;
						height: |height|;
					}
				}
			</code></pre>
	
		1. Apply the following styles in [=user-agent origin=]:
	
			<pre><code highlight=css>
				html::page-transition-container(|tag|) {
					animation: page-transition-container-anim-|tag| 0.25s both;
				}
			</code></pre>
	
	Issue: How are keyframes scoped to user-agent origin? We could decide
		scope based on whether `animation-name` in the computed style
		came from a developer or UA stylesheet.
		But we do want developers to be able to
	
	Issue: We should retarget the animation if computed properties for
		incoming elements change.
</div>

<div algorithm>
	To <dfn>create transition pseudo-elements</dfn>
	given a {{SameDocumentTransition}} |manager|:
	
	1. Create a new ''::page-transition'' pseudo-element,
		if it doesn't exist. Let |pt| be the ''::page-transition''
		pseudo-element.
	
	1. [=map/For each=] |tag| -> |CapturedElement| of |manager|&apos;s {{[[TaggedElements]]}}:

		1. Create a new ''::page-transition-container'' pseudo-element
			with the tag |tag| and insert it as a child of |pt|,
			if it doesn't exist. Let |container| be the
			''::page-transition-container'' pseudo-element with the tag |tag|.

		1. Let |width| be the current width of |CapturedElement|&apos;s [=incoming element=]'s [=border box=],
			is it exists; otherwise, |CapturedElement|&apos;s "outgoing data" 'width' property.
	
			Let |height| be the current height of |CapturedElement|&apos;s [=incoming element=]'s [=border box=],
			is it exists; otherwise, |CapturedElement|&apos;s "outgoing data" 'height' property.
	
			Let |transform| be a transform that maps the
			|CapturedElement|&apos;s [=incoming element=]'s [=border box=] from document origin to its quad in
			viewport, if [=incoming element=] exists; otherwise,
			|CapturedElement|&apos;s "outgoing data" 'transform' property.

			Let |writing-mode| and |direction| be the current value of those properties
			on |CapturedElement|&apos;s [=incoming element=],
			if it exists;
			otherwise, |CapturedElement|&apos;s "outgoing data" corresponding property.

			At the [=user-agent origin=],
			set |container|&apos;s 'width', 'height', 'transform', 'writing-mode', and 'direction' properties
			to |width|, |height|, |transform|, |writing-mode|, and |direction|.

		1. Create a new ''::page-transition-image-wrapper'' pseudo-element
			with the tag |tag| and inserted as a child of |container|, if it doesn't exist.
			Let |image wrapper| be the ''::page-transition-image-wrapper'' pseudo-element
			with the tag |tag|.

		1. If |CapturedElement| has an [=outgoing image=],
			then create a new ''::page-transition-outgoing-image'' pseudo-element
			with the tag |tag| and inserted as a child of |image wrapper|, if it doesn't exist.
			Let |outgoing| be the ''::page-transition-outgoing-image'' pseudo-element with
			the tag |tag|.
			This pseudo-element is a [=replaced element=],
			displaying |CapturedElement|&apos;s [=outgoing image=].

			At the [=user-agent origin=],
			set |outgoing|&apos;s 'object-view-box' property
			to |CapturedData|&apos;s "outgoing data" 'object-view-box' property.
    
            Issue: Which of ''xywh()''/''rect()''/''inset()'' should we use?

		1. If |CapturedData| has an [=incoming element=],
			then create be a new ''::page-transition-incoming-image''
			pseudo-element
			with the tag |tag|,
			inserted as a child of |image wrapper|
			(after |outgoing|, if it exists), if it doesn't exist.
			Let |incoming| be the ''::page-transition-incoming-image'' pseudo-element with
			the tag |tag|.
			This pseudo-element is a [=replaced element=],
			displaying the [=capture the image=]
			of |CapturedElement|&apos;s [=incoming element=].

			At the [=user-agent origin=],
			set |incoming|&apos;s 'object-view-box' property
			to a value that when applied to |incoming|,
			will cause the view box to coincide with [=incoming element=]'s [=border box=]
			in the image.
</div>
